#include<bits/stdc++.h>
using namespace std;
//gloabally making a board acc. to given constraints
int board[11][11];
bool isPossible(int n,int row,int col)
{
    //checking in uper rows in same col
    for(int i=row-1; i>=0; i--)
    {
        if(board[i][col]==1)
            return false;
    }
    //checking left upper rows with cols in diagnol
    for(int i=row-1,j=col-1; i>=0,j>=0; i--,j--)
    {
        if(board[i][j]==1)
            return false;
    }
    //checking right upper rows and cols in diagnol
    for(int i=row-1,j=col+1; i>=0,j<n; i--,j++)
    {
        if(board[i][j]==1)
            return false;
    }
    //if none is case then position is correct
    return true;
}
void nQueenHelper(int n,int row)
{
    if(row==n)//means we are on the last row so we can print this solution
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                cout<<board[i][j]<<" ";
        }
        cout<<endl;
    return;
    }
    //if that was not the case then we work on asked row, travrse in its col for right pos
    for(int j=0;j<n;j++)
    {
        if(isPossible(n,row,j))
        {
            board[row][j] = 1;
            nQueenHelper(n,row+1);//saying to put another queen in next row
            board[row][j] = 0;//we come to this at the end of putting all queens means we fill 0 on all,
            //locations starting from last row
        }
    }
    return;
}

void placeQueens(int n)
{
    memset(board,0,11*11*sizeof(int));
    nQueenHelper(n,0);
}
int main(){
    int n;
    cin>>n;
    placeQueens(n);
    return 0;
}
